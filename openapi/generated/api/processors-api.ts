/* tslint:disable */
/* eslint-disable */
/**
 * Red Hat Openshift SmartEvents Fleet Manager
 * The api exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProcessorListResponse } from '../model';
// @ts-ignore
import { ProcessorRequest } from '../model';
// @ts-ignore
import { ProcessorResponse } from '../model';
/**
 * ProcessorsApi - axios parameter creator
 * @export
 */
export const ProcessorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Processor of a Bridge instance for the authenticated user.
         * @summary Create a Processor of a Bridge instance
         * @param {string} bridgeId 
         * @param {ProcessorRequest} [processorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProcessorToBridge: async (bridgeId: string, processorRequest?: ProcessorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bridgeId' is not null or undefined
            assertParamExists('addProcessorToBridge', 'bridgeId', bridgeId)
            const localVarPath = `/api/v1/bridges/{bridgeId}/processors`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Processor of a Bridge instance for the authenticated user.
         * @summary Delete a Processor of a Bridge instance
         * @param {string} bridgeId 
         * @param {string} processorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessor: async (bridgeId: string, processorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bridgeId' is not null or undefined
            assertParamExists('deleteProcessor', 'bridgeId', bridgeId)
            // verify required parameter 'processorId' is not null or undefined
            assertParamExists('deleteProcessor', 'processorId', processorId)
            const localVarPath = `/api/v1/bridges/{bridgeId}/processors/{processorId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)))
                .replace(`{${"processorId"}}`, encodeURIComponent(String(processorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Processor of a Bridge instance for the authenticated user.
         * @summary Get a Processor of a Bridge instance
         * @param {string} bridgeId 
         * @param {string} processorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessor: async (bridgeId: string, processorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bridgeId' is not null or undefined
            assertParamExists('getProcessor', 'bridgeId', bridgeId)
            // verify required parameter 'processorId' is not null or undefined
            assertParamExists('getProcessor', 'processorId', processorId)
            const localVarPath = `/api/v1/bridges/{bridgeId}/processors/{processorId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)))
                .replace(`{${"processorId"}}`, encodeURIComponent(String(processorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Processors of a Bridge instance for the authenticated user.
         * @summary Get the list of Processors of a Bridge instance
         * @param {string} bridgeId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProcessors: async (bridgeId: string, page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bridgeId' is not null or undefined
            assertParamExists('listProcessors', 'bridgeId', bridgeId)
            const localVarPath = `/api/v1/bridges/{bridgeId}/processors`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Processor instance Filter definition or Transformation template for the authenticated user.
         * @summary Update a Processor instance Filter definition or Transformation template.
         * @param {string} bridgeId 
         * @param {string} processorId 
         * @param {ProcessorRequest} [processorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessor: async (bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bridgeId' is not null or undefined
            assertParamExists('updateProcessor', 'bridgeId', bridgeId)
            // verify required parameter 'processorId' is not null or undefined
            assertParamExists('updateProcessor', 'processorId', processorId)
            const localVarPath = `/api/v1/bridges/{bridgeId}/processors/{processorId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)))
                .replace(`{${"processorId"}}`, encodeURIComponent(String(processorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessorsApi - functional programming interface
 * @export
 */
export const ProcessorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Processor of a Bridge instance for the authenticated user.
         * @summary Create a Processor of a Bridge instance
         * @param {string} bridgeId 
         * @param {ProcessorRequest} [processorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProcessorToBridge(bridgeId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProcessorToBridge(bridgeId, processorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Processor of a Bridge instance for the authenticated user.
         * @summary Delete a Processor of a Bridge instance
         * @param {string} bridgeId 
         * @param {string} processorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProcessor(bridgeId, processorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Processor of a Bridge instance for the authenticated user.
         * @summary Get a Processor of a Bridge instance
         * @param {string} bridgeId 
         * @param {string} processorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessor(bridgeId, processorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of Processors of a Bridge instance for the authenticated user.
         * @summary Get the list of Processors of a Bridge instance
         * @param {string} bridgeId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProcessors(bridgeId: string, page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProcessors(bridgeId, page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Processor instance Filter definition or Transformation template for the authenticated user.
         * @summary Update a Processor instance Filter definition or Transformation template.
         * @param {string} bridgeId 
         * @param {string} processorId 
         * @param {ProcessorRequest} [processorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProcessor(bridgeId, processorId, processorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProcessorsApi - factory interface
 * @export
 */
export const ProcessorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessorsApiFp(configuration)
    return {
        /**
         * Create a Processor of a Bridge instance for the authenticated user.
         * @summary Create a Processor of a Bridge instance
         * @param {string} bridgeId 
         * @param {ProcessorRequest} [processorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProcessorToBridge(bridgeId: string, processorRequest?: ProcessorRequest, options?: any): AxiosPromise<ProcessorResponse> {
            return localVarFp.addProcessorToBridge(bridgeId, processorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Processor of a Bridge instance for the authenticated user.
         * @summary Delete a Processor of a Bridge instance
         * @param {string} bridgeId 
         * @param {string} processorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessor(bridgeId: string, processorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProcessor(bridgeId, processorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Processor of a Bridge instance for the authenticated user.
         * @summary Get a Processor of a Bridge instance
         * @param {string} bridgeId 
         * @param {string} processorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessor(bridgeId: string, processorId: string, options?: any): AxiosPromise<ProcessorResponse> {
            return localVarFp.getProcessor(bridgeId, processorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Processors of a Bridge instance for the authenticated user.
         * @summary Get the list of Processors of a Bridge instance
         * @param {string} bridgeId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProcessors(bridgeId: string, page?: number, size?: number, options?: any): AxiosPromise<ProcessorListResponse> {
            return localVarFp.listProcessors(bridgeId, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Processor instance Filter definition or Transformation template for the authenticated user.
         * @summary Update a Processor instance Filter definition or Transformation template.
         * @param {string} bridgeId 
         * @param {string} processorId 
         * @param {ProcessorRequest} [processorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: any): AxiosPromise<ProcessorResponse> {
            return localVarFp.updateProcessor(bridgeId, processorId, processorRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessorsApi - interface
 * @export
 * @interface ProcessorsApi
 */
export interface ProcessorsApiInterface {
    /**
     * Create a Processor of a Bridge instance for the authenticated user.
     * @summary Create a Processor of a Bridge instance
     * @param {string} bridgeId 
     * @param {ProcessorRequest} [processorRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApiInterface
     */
    addProcessorToBridge(bridgeId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): AxiosPromise<ProcessorResponse>;

    /**
     * Delete a Processor of a Bridge instance for the authenticated user.
     * @summary Delete a Processor of a Bridge instance
     * @param {string} bridgeId 
     * @param {string} processorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApiInterface
     */
    deleteProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a Processor of a Bridge instance for the authenticated user.
     * @summary Get a Processor of a Bridge instance
     * @param {string} bridgeId 
     * @param {string} processorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApiInterface
     */
    getProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): AxiosPromise<ProcessorResponse>;

    /**
     * Get the list of Processors of a Bridge instance for the authenticated user.
     * @summary Get the list of Processors of a Bridge instance
     * @param {string} bridgeId 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApiInterface
     */
    listProcessors(bridgeId: string, page?: number, size?: number, options?: AxiosRequestConfig): AxiosPromise<ProcessorListResponse>;

    /**
     * Update a Processor instance Filter definition or Transformation template for the authenticated user.
     * @summary Update a Processor instance Filter definition or Transformation template.
     * @param {string} bridgeId 
     * @param {string} processorId 
     * @param {ProcessorRequest} [processorRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApiInterface
     */
    updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): AxiosPromise<ProcessorResponse>;

}

/**
 * ProcessorsApi - object-oriented interface
 * @export
 * @class ProcessorsApi
 * @extends {BaseAPI}
 */
export class ProcessorsApi extends BaseAPI implements ProcessorsApiInterface {
    /**
     * Create a Processor of a Bridge instance for the authenticated user.
     * @summary Create a Processor of a Bridge instance
     * @param {string} bridgeId 
     * @param {ProcessorRequest} [processorRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    public addProcessorToBridge(bridgeId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig) {
        return ProcessorsApiFp(this.configuration).addProcessorToBridge(bridgeId, processorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Processor of a Bridge instance for the authenticated user.
     * @summary Delete a Processor of a Bridge instance
     * @param {string} bridgeId 
     * @param {string} processorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    public deleteProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig) {
        return ProcessorsApiFp(this.configuration).deleteProcessor(bridgeId, processorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Processor of a Bridge instance for the authenticated user.
     * @summary Get a Processor of a Bridge instance
     * @param {string} bridgeId 
     * @param {string} processorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    public getProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig) {
        return ProcessorsApiFp(this.configuration).getProcessor(bridgeId, processorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Processors of a Bridge instance for the authenticated user.
     * @summary Get the list of Processors of a Bridge instance
     * @param {string} bridgeId 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    public listProcessors(bridgeId: string, page?: number, size?: number, options?: AxiosRequestConfig) {
        return ProcessorsApiFp(this.configuration).listProcessors(bridgeId, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Processor instance Filter definition or Transformation template for the authenticated user.
     * @summary Update a Processor instance Filter definition or Transformation template.
     * @param {string} bridgeId 
     * @param {string} processorId 
     * @param {ProcessorRequest} [processorRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    public updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig) {
        return ProcessorsApiFp(this.configuration).updateProcessor(bridgeId, processorId, processorRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
