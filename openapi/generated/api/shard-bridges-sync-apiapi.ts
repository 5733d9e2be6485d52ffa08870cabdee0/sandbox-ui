/* tslint:disable */
/* eslint-disable */
/**
 * manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BridgeDTO } from '../model';
// @ts-ignore
import { ProcessorDTO } from '../model';
/**
 * ShardBridgesSyncAPIApi - axios parameter creator
 * @export
 */
export const ShardBridgesSyncAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShardBridgesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/shard/bridges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShardBridgesProcessorsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/shard/bridges/processors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProcessorDTO} [processorDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShardBridgesProcessorsPut: async (processorDTO?: ProcessorDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/shard/bridges/processors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processorDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BridgeDTO} [bridgeDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShardBridgesPut: async (bridgeDTO?: BridgeDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/shard/bridges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bridgeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShardBridgesSyncAPIApi - functional programming interface
 * @export
 */
export const ShardBridgesSyncAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShardBridgesSyncAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShardBridgesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShardBridgesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShardBridgesProcessorsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShardBridgesProcessorsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProcessorDTO} [processorDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShardBridgesProcessorsPut(processorDTO?: ProcessorDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShardBridgesProcessorsPut(processorDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BridgeDTO} [bridgeDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShardBridgesPut(bridgeDTO?: BridgeDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShardBridgesPut(bridgeDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShardBridgesSyncAPIApi - factory interface
 * @export
 */
export const ShardBridgesSyncAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShardBridgesSyncAPIApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShardBridgesGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ShardBridgesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShardBridgesProcessorsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ShardBridgesProcessorsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProcessorDTO} [processorDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShardBridgesProcessorsPut(processorDTO?: ProcessorDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ShardBridgesProcessorsPut(processorDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BridgeDTO} [bridgeDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShardBridgesPut(bridgeDTO?: BridgeDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ShardBridgesPut(bridgeDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShardBridgesSyncAPIApi - interface
 * @export
 * @interface ShardBridgesSyncAPIApi
 */
export interface ShardBridgesSyncAPIApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardBridgesSyncAPIApiInterface
     */
    apiV1ShardBridgesGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardBridgesSyncAPIApiInterface
     */
    apiV1ShardBridgesProcessorsGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {ProcessorDTO} [processorDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardBridgesSyncAPIApiInterface
     */
    apiV1ShardBridgesProcessorsPut(processorDTO?: ProcessorDTO, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {BridgeDTO} [bridgeDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardBridgesSyncAPIApiInterface
     */
    apiV1ShardBridgesPut(bridgeDTO?: BridgeDTO, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ShardBridgesSyncAPIApi - object-oriented interface
 * @export
 * @class ShardBridgesSyncAPIApi
 * @extends {BaseAPI}
 */
export class ShardBridgesSyncAPIApi extends BaseAPI implements ShardBridgesSyncAPIApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardBridgesSyncAPIApi
     */
    public apiV1ShardBridgesGet(options?: AxiosRequestConfig) {
        return ShardBridgesSyncAPIApiFp(this.configuration).apiV1ShardBridgesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardBridgesSyncAPIApi
     */
    public apiV1ShardBridgesProcessorsGet(options?: AxiosRequestConfig) {
        return ShardBridgesSyncAPIApiFp(this.configuration).apiV1ShardBridgesProcessorsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProcessorDTO} [processorDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardBridgesSyncAPIApi
     */
    public apiV1ShardBridgesProcessorsPut(processorDTO?: ProcessorDTO, options?: AxiosRequestConfig) {
        return ShardBridgesSyncAPIApiFp(this.configuration).apiV1ShardBridgesProcessorsPut(processorDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BridgeDTO} [bridgeDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShardBridgesSyncAPIApi
     */
    public apiV1ShardBridgesPut(bridgeDTO?: BridgeDTO, options?: AxiosRequestConfig) {
        return ShardBridgesSyncAPIApiFp(this.configuration).apiV1ShardBridgesPut(bridgeDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
