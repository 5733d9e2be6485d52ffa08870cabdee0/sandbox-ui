/* tslint:disable */
/* eslint-disable */
/**
 * manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BridgeRequest } from '../model';
/**
 * BridgesAPIApi - axios parameter creator
 * @export
 */
export const BridgesAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} bridgeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BridgesBridgeIdDelete: async (bridgeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bridgeId' is not null or undefined
            assertParamExists('apiV1BridgesBridgeIdDelete', 'bridgeId', bridgeId)
            const localVarPath = `/api/v1/bridges/{bridgeId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bridgeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BridgesBridgeIdGet: async (bridgeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bridgeId' is not null or undefined
            assertParamExists('apiV1BridgesBridgeIdGet', 'bridgeId', bridgeId)
            const localVarPath = `/api/v1/bridges/{bridgeId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BridgesGet: async (page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bridges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BridgeRequest} [bridgeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BridgesPost: async (bridgeRequest?: BridgeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bridges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bridgeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BridgesAPIApi - functional programming interface
 * @export
 */
export const BridgesAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BridgesAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} bridgeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BridgesBridgeIdDelete(bridgeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BridgesBridgeIdDelete(bridgeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bridgeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BridgesBridgeIdGet(bridgeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BridgesBridgeIdGet(bridgeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BridgesGet(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BridgesGet(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BridgeRequest} [bridgeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BridgesPost(bridgeRequest?: BridgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BridgesPost(bridgeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BridgesAPIApi - factory interface
 * @export
 */
export const BridgesAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BridgesAPIApiFp(configuration)
    return {
        /**
         * 
         * @param {string} bridgeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BridgesBridgeIdDelete(bridgeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1BridgesBridgeIdDelete(bridgeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bridgeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BridgesBridgeIdGet(bridgeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1BridgesBridgeIdGet(bridgeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BridgesGet(page?: number, size?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1BridgesGet(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BridgeRequest} [bridgeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BridgesPost(bridgeRequest?: BridgeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1BridgesPost(bridgeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BridgesAPIApi - interface
 * @export
 * @interface BridgesAPIApi
 */
export interface BridgesAPIApiInterface {
    /**
     * 
     * @param {string} bridgeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesAPIApiInterface
     */
    apiV1BridgesBridgeIdDelete(bridgeId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} bridgeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesAPIApiInterface
     */
    apiV1BridgesBridgeIdGet(bridgeId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesAPIApiInterface
     */
    apiV1BridgesGet(page?: number, size?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {BridgeRequest} [bridgeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesAPIApiInterface
     */
    apiV1BridgesPost(bridgeRequest?: BridgeRequest, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * BridgesAPIApi - object-oriented interface
 * @export
 * @class BridgesAPIApi
 * @extends {BaseAPI}
 */
export class BridgesAPIApi extends BaseAPI implements BridgesAPIApiInterface {
    /**
     * 
     * @param {string} bridgeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesAPIApi
     */
    public apiV1BridgesBridgeIdDelete(bridgeId: string, options?: AxiosRequestConfig) {
        return BridgesAPIApiFp(this.configuration).apiV1BridgesBridgeIdDelete(bridgeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bridgeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesAPIApi
     */
    public apiV1BridgesBridgeIdGet(bridgeId: string, options?: AxiosRequestConfig) {
        return BridgesAPIApiFp(this.configuration).apiV1BridgesBridgeIdGet(bridgeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesAPIApi
     */
    public apiV1BridgesGet(page?: number, size?: number, options?: AxiosRequestConfig) {
        return BridgesAPIApiFp(this.configuration).apiV1BridgesGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BridgeRequest} [bridgeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesAPIApi
     */
    public apiV1BridgesPost(bridgeRequest?: BridgeRequest, options?: AxiosRequestConfig) {
        return BridgesAPIApiFp(this.configuration).apiV1BridgesPost(bridgeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
